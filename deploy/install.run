<?php
/**
 * Install script for Sencrypt Module for Sentora 1.0.3
 * Version : 002
 * Author : TGates
 * Additional work by Diablo925
 */
 
require_once('cnf/db.php');
require_once('dryden/db/driver.class.php');
require_once('dryden/debug/logger.class.php');
require_once('dryden/runtime/dataobject.class.php');
require_once('dryden/sys/versions.class.php');
require_once('dryden/ctrl/options.class.php');
require_once('dryden/ctrl/auth.class.php');
require_once('dryden/ctrl/users.class.php');
require_once('dryden/fs/director.class.php');
require_once('dryden/fs/filehandler.class.php');
require_once('inc/dbc.inc.php');

// for possible future use
function installModule(){
    global $zdbh;
    $install = $zdbh->prepare("CREATE TABLE IF NOT EXISTS `x_sencrypt-vhosts` (
		`ssl_vh_id_pk` int(6) unsigned NOT NULL AUTO_INCREMENT,
		`ssl_vh_acc_fk` int(6) DEFAULT NULL,
		`ssl_vh_name_vc` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci DEFAULT NULL,
		`ssl_vh_directory_vc` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci DEFAULT NULL,
		`ssl_vh_type_in` int(1) DEFAULT '1',
		`ssl_vh_active_in` int(1) DEFAULT '0',
		`ssl_vh_suhosin_in` int(1) DEFAULT '1',
		`ssl_vh_obasedir_in` int(1) DEFAULT '1',
		`ssl_vh_custom_tx` text,
		`ssl_vh_custom_port_in` int(6) DEFAULT NULL,
		`ssl_vh_custom_ip_vc` varchar(45) DEFAULT NULL,
		`ssl_vh_portforward_in` int(1) DEFAULT NULL,
		`ssl_vh_soaserial_vc` CHAR(10) DEFAULT 'AAAAMMDDSS',
		`ssl_vh_enabled_in` int(1) DEFAULT '1',
		`ssl_vh_created_ts` int(30) DEFAULT NULL,
		`ssl_vh_deleted_ts` int(30) DEFAULT NULL,
		PRIMARY KEY (`ssl_vh_id_pk`)
		) ENGINE=MyISAM DEFAULT CHARSET=utf8;");
     $install->execute();
}

//installModule();

// check server set up and prepare for Sencrypt - Untested and may need more development
/*
Let's Encrypt for ISPConfig
Copyright (c) 2015, Alexandre Alouit <alexandre.alouit@gmail.com>
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
if(getcwd() != realpath(dirname(__FILE__))) {
	echo "ERROR: Run me in current installer directory!\n";
	exit;
}
if(!is_dir("/etc/letsencrypt")) {
	echo "ERROR: Let's Encrypt directory ( /etc/letsencrypt/ ) is missing, install it corecctly!\n";
	exit;
}
if(!is_file("/root/.local/share/letsencrypt/bin/letsencrypt")) {
	echo "ERROR: Let's Encrypt ( /root/.local/share/letsencrypt/bin/letsencrypt ) is missing, install it corecctly!\n";
	exit;
}
if(is_file("/etc/letsencrypt/cli.ini")) {
	echo "Let's Encrypt configuration file exist, backup up and remove.\n";
	exec("cp /etc/letsencrypt/cli.ini " . $backup_dir . date("Ymdhis") . "-letsencrypt.cli.ini");
	exec("rm /etc/letsencrypt/cli.ini");
}
echo "Copy Let's Encrypt configuration.\n";
exec("cp ./cli.ini /etc/letsencrypt/cli.ini");
if(!$buffer = mysql_connect($clientdb_host, $clientdb_user, $clientdb_password)) {
	echo "ERROR: There was a problem with the MySQL connection.\n";
	exit;
}
if(is_file("/etc/apache2/apache2.conf")) {
	echo "Configure Apache and reload it.\n";
	if(is_dir("/etc/apache2/conf-available")) {
		if(is_file("/etc/apache2/conf-available/letsencrypt.conf")) {
			exec("rm /etc/apache2/conf-available/letsencrypt.conf");
		}
		exec("cp ./apache.letsencrypt.conf /etc/apache2/conf-available/letsencrypt.conf");
	}
	if(is_dir("/etc/apache2/conf.d")) {
		if(is_file("/etc/apache2/conf.d/letsencrypt.conf")) {
			exec("rm /etc/apache2/conf.d/letsencrypt.conf");
		}
		exec("cp ./apache.letsencrypt.conf /etc/apache2/conf.d/letsencrypt.conf");
	}
	exec("a2enmod headers");
	exec("a2enconf letsencrypt");
	exec("service apache2 reload");
}
echo "Create backup cronjob on " . $backup_dir . " directory\n";
exec("crontab -l >> " . $backup_dir . $backup_file2);
if(!file_exists($backup_dir . $backup_file2 )) {
	echo "ERROR: There was a problem with the cronjob backup file.\n";
	exit;
}
exec("crontab -l", $output);
if(!in_array("30 02 * * * /root/.local/share/letsencrypt/bin/letsencrypt renew >> /var/log/sentora/cron.log;", $output)) {
	echo "Add a cronjob for renewal certs\n";
	$output[] = "30 02 * * * /root/.local/share/letsencrypt/bin/letsencrypt renew >> /var/log/sentora/cron.log;";
	exec("touch ./crontab.tmp");
	if(!is_file("./crontab.tmp")) {
		echo "ERROR: Unable to create temporary crontab file.\n";
		exit;
	}
	foreach($output as $line) {
		exec("echo '" . $line . "' >> ./crontab.tmp");
	}
exec("crontab ./crontab.tmp");
exec("rm ./crontab.tmp");
} else {
		echo "Renewer already present in crontab.\n";
}
echo "Completed\n";
?>